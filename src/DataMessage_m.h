//
// Generated file, do not edit! Created by nedtool 5.6 from DataMessage.msg.
//

#ifndef __DATAMESSAGE_M_H
#define __DATAMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>
#include <string>
using std::string;
using std::stoi;
using std::to_string;
// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


enum FrameType{
    Data,
    Ack,
    Nack
};
/**
 * Class generated from <tt>DataMessage.msg:34</tt> by nedtool.
 * <pre>
 * //cplusplus {{
 * //#include "SomeType.h"
 * //}}
 * //class noncobject SomeType;
 * //
 * //cplusplus {{
 * //#include <map>
 * //typedef OtherType std::map<int,int>;
 * //}}
 * //class noncobject OtherType;
 * //cplusplus {{
 * //  #include <string>
 * //  typedef Type std::string;
 * //}}
 * //class Type;
 * //
 * // TODO generated message class
 * //
 * packet DataMessage
 * {
 *     int seqNum;
 *     string payload;
 *     char parity;
 *     int frameType;
 *     int ackSeqNum;
 * }
 * </pre>
 */
class DataMessage : public ::omnetpp::cPacket
{
  protected:
    int seqNum;
    ::omnetpp::opp_string payload;
    char parity;
    int frameType;
    int ackSeqNum;

  private:
    void copy(const DataMessage& other);
    string frameMessage(const string& Msg) const;
    string stripMessage(const string& Msg) const;
    char calculateParity(const string& Msg) const;

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMessage&);

  public:
    DataMessage(const char *name=nullptr, short kind=0);
    DataMessage(int SeqNum, string Msg);
    DataMessage(int SeqNum, int Type);
    DataMessage(const DataMessage& other);
    virtual ~DataMessage();
    DataMessage& operator=(const DataMessage& other);
    virtual DataMessage *dup() const override {return new DataMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
    virtual int isValid() const;
    // field getter/setter methods
    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);
    virtual string getPayload() const;
    virtual string getPayloadWithFraming() const;
    virtual void setPayload(string payload);
    virtual char getParity() const;
    virtual void setParity(char parity);
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual void setAckSeqNum(int ackSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __DATAMESSAGE_M_H

